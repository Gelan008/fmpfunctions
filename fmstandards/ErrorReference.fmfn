/*
 * =====================================================
 * ErrorReference ( elementName ; requiredElementNames ; requiredType )
 * 
 * PARAMETERS:			@elementName = FileMaker field reference
 *							@requiredElementNames = List() of required element names
 *							@requiredTypes = matching list of types for each element
 * RETURNS:				(boolean) Whether or not there is a calculation error
 * DEPENDENCIES:		none
 * NOTES:				References, at time of evaluation, are based on
 *                   current context.
 * =====================================================
 * 
 */

Let ( [
	$$ERROR.REFERENCE = ""; // always start as if there is no error
	// Set a global variable with match values - only make function calls on first iteration
	$$TEMP = If ( IsEmpty ( $$TEMP );
		FilterValues (
			Case (
				requiredType = "Table";
					TableNames ( Get ( FileName ) );

				requiredType = "Field";
					FieldNames ( Get ( FileName ) ; Get ( LayoutName ) );

				requiredType = "Layout";
					LayoutNames ( Get ( FileName ) );
				
				requiredType = "Object";
				   LayoutObjectNames ( Get ( FileName ) ; Get ( LayoutName ) );

				requiredType = "Window";
				   WindowNames ( Get ( FileName ) );

				""
		); requiredElementNames );
		// Else
		$$TEMP
	);
	
	var.topValue = GetValue ( requiredElementNames ; 1 );
	var.valueExists = PatternCount ( $$TEMP; var.topValue ) ≥ 1 or var.topValue = "";
	var.remaingValues = RightValues ( requiredElementNames ; ValueCount ( requiredElementNames ) - 1 )
	// The following line is used for debugging
	//$$ITERATIONS = List ( $$ITERATIONS ; List ( "top:¶" & Quote ( var.topValue ) ; "exists:¶" & var.valueExists ; "remains:¶" & Quote ( var.remaingValues ) ; "match:¶" & $$TEMP ;  "----------------") )
];
	If ( not var.valueExists; // return the error
			Let ( [
				$$TEMP = ""; // reset the temp variable
				$$ERROR.REFERENCE = elementName & ": Missing literal references"
			];
				True
			);
			
			// Else
			
			If ( var.remaingValues = "";
				Let ( $$TEMP = "" ; False );
				ErrorReference ( elementName ; var.remaingValues ; requiredType )
			)
	)
)